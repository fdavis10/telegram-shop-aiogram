from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from bot_telega.create_bot import bot, dp
from bot_telega.database.connect import sql_start, add_product, del_product, add_value, get_info_user, get_order
from bot_telega.markup.markups import (admin_markup, sub_res_markup,main_markup)
from bot_telega.create_bot import ADMIN_ID




message_def = ""

class AddSneaker(StatesGroup):
    name = State()
    price = State()
    photo = State()

class SetAvailable(StatesGroup):
    sneaker_name = State()

class DeleteSneaker(StatesGroup):
    sneaker_name_del = State()

class Notification(StatesGroup):
    message_notification = State()

sneak_info = {}

# admin panel activation
@dp.message_handler(commands=["apanel"])
async def authorization_admin(message: types.Message):
    global ADMIN_ID
    ID = message.from_user.id
    if message.from_user.id == ADMIN_ID:
        await bot.send_message(message.from_user.id, "üõ† –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_markup)
        await message.delete()
    else:
        await bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", reply_markup=main_markup)

@dp.message_handler(lambda message: "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏" in message.text, state = None)
async def adm_start(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await AddSneaker.name.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫")

@dp.message_handler(state = AddSneaker.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID or ADMIN_EVA:
        async with state.proxy() as data:
            data['name_product'] = message.text
        await AddSneaker.next()
        await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫—Ä–æ—Å—Å–æ–≤–∫–∏")

@dp.message_handler(state = AddSneaker.price)
async def load_price_day(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        async with state.proxy() as data:
            data['price'] = message.text
        await AddSneaker.next()
        await bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ")

@dp.message_handler(content_types = ["photo"], state = AddSneaker.photo)
async def load_photo(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        global sneak_info
        async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
        async with state.proxy() as data:
            await bot.send_message(message.chat.id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup = sub_res_markup)
            await bot.send_message(message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name_product']}\n–¶–µ–Ω–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫: {data['price']}\n")
            await bot.send_photo(message.chat.id, data['photo'])
            sneak_info = data
        await state.finish()

@dp.message_handler(lambda message: "–î–æ–±–∞–≤–∏—Ç—å" in message.text)
async def add_products(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        global sneak_info
        if sneak_info != {}:
            sql_start()
            await add_product(sneak_info['name_product'],sneak_info['photo'], sneak_info['price'])
            await bot.send_message(message.chat.id, "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup = admin_markup)
        elif sneak_info == {}:
            await bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–æ—Å—Å–æ–≤–∫–∞—Ö")

@dp.message_handler(lambda message: "–°–±—Ä–æ—Å–∏—Ç—å" in message.text)
async def reset_info(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã", reply_markup = admin_markup)

@dp.message_handler(lambda message: "–£–¥–∞–ª–∏—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏" in message.text)
async def delete_product(message: types.Message):
    await DeleteSneaker.sneaker_name_del.set()
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å")

@dp.message_handler(state = DeleteSneaker.sneaker_name_del)
async def delete_game_db(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        name_product = message.text
        sql_start()
        await del_product(name_product)
        await bot.send_message(message.chat.id, f"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ <b>'{name_product}'</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", parse_mode="html")
        await state.finish()

@dp.message_handler(lambda message: "–í–µ—Ä–Ω—É—Ç—å –≤ –Ω–∞–ª–∏—á–∏–µ" in message.text)
async def set_av_name(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await SetAvailable.sneaker_name.set()
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ç—É—Å <b>'–í –Ω–∞–ª–∏—á–∏–µ'</b>", parse_mode="html")

@dp.message_handler(state = SetAvailable.sneaker_name)
async def set_av(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        async with state.proxy() as name:
            name["name_product"] = message.text
            sql_start()
            add_value(name["name_product"], 1)
            await bot.send_message(message.chat.id, f"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ '{name['name_product']}' —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!")
        await state.finish()

@dp.message_handler(lambda message: "üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" in message.text)
async def notification_users(message: types.Message):
    if message.chat.id == ADMIN_ID:
        await bot.send_message(message.chat.id, 'üîî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å:')
        await Notification.message_notification.set()

@dp.message_handler(state = Notification.message_notification)
async def handle_message_for_notifications(message: types.Message, state: FSMContext):
    if message.chat.id == ADMIN_ID:
        message_notificataion = message.text
        users_id = get_info_user()
        for usid in users_id:
            await bot.send_message(chat_id=usid[0], text = f'üõ† –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n'
                                                           f'\n'
                                                           f'{message_notificataion}')
        await bot.send_message(message.chat.id, 'üü¢ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!')
        await state.finish()