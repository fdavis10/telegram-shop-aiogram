from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from bot_telega.create_bot import bot, dp
from bot_telega.database.connect import sql_start, add_user, create_table, checker, print_products, add_order, receive_method, get_info, add_value, add_pay_method
from bot_telega.markup.markups import *
from bot_telega.admin.admin_panel import *
from bot_telega.admin.admin_functions_with_users import get_question, order_notification
import random

choices = []
final_price = 0
limit = 5
offset = 0
showed = limit
username = ""
remove_check = []
message_def = ""




class UserAddress(StatesGroup):
    user_address = State()

class Suggestion(StatesGroup):
    suggestion = State()

class Ask(StatesGroup):
    question = State()



@dp.message_handler(commands = ["start"])
async def start_command(message: types.Message):
    userid = message.from_id
    username = message.from_user.username
    sql_start()
    add_user(username, userid)
    await bot.send_message(message.chat.id, f'üëü –ü—Ä–∏–≤–µ—Å—Ç–≤—É–µ–º, –≤–∞—Å –≤ <b>POIDEL</b>‚≠ê\n'
                                            f'\n'
                                            f'–ú—ã - –≤–∞—à–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏–∑ –ö–∏—Ç–∞—è!üá®üá≥‚ú®'
                                            f'–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã–µ —Å—Ç–∏–ª—å–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –≤–∞—à –∏–Ω–¥–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å.\n'
                                            f'\n'
                                            f'üì¶ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã -'
                                            f'–≤—Å–µ —ç—Ç–æ –∂–¥–µ—Ç –≤–∞—Å –≤ <b>PODEL</b>\n'
                                            f'\n'
                                            f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —à–∞–≥–∞–π—Ç–µ –≤ –º–∏—Ä –º–æ–¥—ã —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º!üöÄüíô', parse_mode="html", reply_markup=main_markup)

@dp.message_handler(commands = ["choose_sneaker"])
async def choose_sneaker(message: types.Message):
    global offset, limit, showed,message_def
    offset = 0
    showed = limit
    sql_start()
    check = checker()
    message_def = message
    if check is not None:
        await bot.send_message(message.chat.id, "üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏:", reply_markup = order_markup)
        await print_products(message, offset, limit, showed)
        offset += limit
        showed += limit
    else:
        await bot.send_message(message.chat.id, "üé∞ –°–∫–æ—Ä–æ –ø–æ–ø–æ–ª–Ω–∏–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫! –û–∂–∏–¥–∞–π—Ç–µ!")


@dp.message_handler(commands = ['basket'])
async def basket_command(message: types.Message):
    global choices
    basket_sneakers = ("\n"
                       "\n"
                       "üëü").join(choices)
    if choices != []:
        await bot.send_message(message.chat.id,f"<b>–ö–æ—Ä–∑–∏–Ω–∞: </b>\n"
                                   f"\n"
                                   f"üëü {basket_sneakers}\n"
                                   f"\n"
                                   f"<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {final_price} ",
                                   parse_mode="html", reply_markup=basket_markup)
    if choices == []:
        await bot.send_message(message.chat.id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

@dp.message_handler(commands = ['home'])
async def home_command(message: types.Message):
    if choices == []:
        await bot.send_message(message.chat.id, "üè† –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é<", reply_markup=main_markup)
    elif choices != []:
        await bot.send_message(message.chat.id, "üè† –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=basket_markup)


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    global offset, limit, showed, message_def, name, choices, remove_check

    if message.text == "üëü –í—ã–±—Ä–∞—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏":
        offset = 0
        showed = limit
        sql_start()
        check = checker()
        message_def = message
        if check is not None:
            await bot.send_message(message.chat.id, "üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏ –≤ –Ω–∞–ª–∏—á–∏–∏:", reply_markup=order_markup)
            await print_products(message, offset, limit, showed)
            offset += limit
            showed += limit
        else:
            await bot.send_message(message.chat.id, "üé∞ –°–∫–æ—Ä–æ –ø–æ–ø–æ–ª–Ω–∏–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–æ—Å—Å–æ–≤–æ–∫! –û–∂–∏–¥–∞–π—Ç–µ!")

    elif message.text == "üóë –ö–æ—Ä–∑–∏–Ω–∞":
        basket_sneakers = ("\n"
                           "\n"
                           "üëü ").join(choices)
        if choices != []:
            await bot.send_message(message.chat.id,
                                   f"<b>–ö–æ—Ä–∑–∏–Ω–∞: </b>\n"
                                   f"\n"
                                   f"üëü {basket_sneakers}\n"
                                   f"\n"
                                   f"<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {final_price} ",
                                   parse_mode="html", reply_markup=basket_markup)
        elif choices == []:
            await bot.send_message(message.chat.id, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")

    elif message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if choices == []:
            await bot.send_message(message.chat.id, "üè† –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=main_markup)
        elif choices != []:
            await bot.send_message(message.chat.id, "üè† –í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=main_markup)

    elif message.text == "üåÄ –û –Ω–∞—Å":
        await bot.send_message(message.chat.id,
                               f'–ú—ã - –≤–∞—à–∞ –Ω–∞–¥–µ–∂–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏–∑ –ö–∏—Ç–∞—è!üá®üá≥‚ú®'
                               f'–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–∞–º—ã–µ —Å—Ç–∏–ª—å–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –≤–∞—à –∏–Ω–¥–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å.\n'
                               f'\n'
                               f'üì¶ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã -'
                               f'–≤—Å–µ —ç—Ç–æ –∂–¥–µ—Ç –≤–∞—Å –≤ <b>PODEL</b>\n'
                               f'\n'
                               f'–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —à–∞–≥–∞–π—Ç–µ –≤ –º–∏—Ä –º–æ–¥—ã —Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º!üöÄüíô',
                               parse_mode="html", reply_markup=main_markup)

    elif message.text == "‚ú® FAQ":
        await bot.send_message(message.chat.id,
                               "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                               "\n"
                               "üí¨ <b>–ö–∞–∫ –º–Ω–µ –∑–∞–±—Ä–∞—Ç—å –º–æ–π –∑–∞–∫–∞–∑?</b>\n"
                               "üì¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–ø–ª–∞—Ç–Ω–æ), –ª–∏–±–æ –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –ø–æ –∞–¥—Ä–µ—Å—É(–±–µ—Å–ø–ª–∞—Ç–Ω–æ).\n"
                               "\n"
                               "üí¨ <b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞?</b>\n"
                               "üì¢ –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –∑–∞–∫–∞–∑, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞, –Ω–∞–ª–∏—á–Ω—ã–µ. –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –ø–æ —Å—Å—ã–ª–∫–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –±–æ—Ç–∞.\n"
                               "\n"
                               "üí¨ <b>–ö–∞–∫ –º–Ω–µ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–∫–∞–∑?</b>\n"
                               "üì¢–í–æ–∑–≤—Ä–∞—Ç –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∞–¥—Ä–µ—Å—É: <b>–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è 18/31</b>\n"
                               "\n"
                               "üí¨ <b>–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n"
                               "üì¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é, —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ: <b>@manager_podel</b>\n",
                               parse_mode="html", reply_markup=main_markup)

    elif message.text == "üë®‚Äçüíª –°–ø—Ä–æ—Å–∏—Ç—å":
        await Ask.question.set()
        await bot.send_message(message.chat.id, "üìã –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å", parse_mode="html")

    elif message.text == "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å":
        username = message.from_user.username
        order_sneakers = ', '.join(choices)
        sql_start()
        add_order(f"{username}",order_sneakers, 0, f"{final_price}", "None", "None", "None", "None")
        await bot.send_message(message.chat.id, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", reply_markup=pick_method_markup)

    elif message.text == "üö∂‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑":
        username = message.from_user.username
        await receive_method('–°–∞–º–æ–≤—ã–≤–æ–∑', '–°–∞–º–æ–≤—ã–≤–æ–∑', username)
        await bot.send_message(message.chat.id, "üó∫ –°–∞–º–æ–≤—ã–≤–æ–∑ —Å –∞–¥—Ä–µ—Å–∞:\n"
                                                "\n"
                                                "<b>–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–æ–≤–æ–≥–∏—Ä–µ–µ–≤—Å–∫–∞—è 18/31</b>", parse_mode="html",
                               reply_markup=buy_markup)

    elif message.text == "üöò –î–æ—Å—Ç–∞–≤–∫–∞":
        await UserAddress.user_address.set()
        await bot.send_message(message.chat.id, 'üì• –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞')


    elif message.text == "‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å":
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=pay_method)

    elif message.text == "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞":
        sql_start()
        username = message.from_user.username
        await add_pay_method("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", username)
        await bot.send_message(message.chat.id, f'üí∏ <b>–í–∞—à —á–µ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n'
                                                f''
                                                f'\n'
                                                f'üí≥ –£ –≤–∞—Å –µ—Å—Ç—å <b>15</b> –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—É–º–º—É: <b>{final_price}</b>\n'
                                                f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: <b>@manager_podel</b>\n'
                                                f'\n'
                                                f'‚ÄºÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n'
                                                f'\n'
                                                f'–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º —Å –ø—Ä–æ—Å—å–±–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—á–µ—Ç!\n'
                                                f'–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–≤–µ—Ä—è–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω–∞–ø–∏—Å–∞–ª!\n'
                                                f'–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!\n'
                                                f'\n'
                                                f'\n'
                                                f'üõçüéâ –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, —Å —É–≤–∞–∂–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ <b>PODEL</b>', parse_mode="html")

    elif message.text == "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏":
        sql_start()
        username = message.from_user.username
        await add_pay_method("–ù–∞–ª–∏—á–Ω—ã–º–∏", username)
        await bot.send_message(message.chat.id, f'üí∏ <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ</b>\n'
                                                f'\n'
                                                f'üöò –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b>–¥–æ—Å—Ç–∞–≤–∫—É</b> - –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–µ –Ω–∞ —Å—É–º–º—É\n'
                                                f'{final_price} –∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä—ã –≤—Ä—É—á–∏—Ç–µ –∏—Ö –Ω–∞—à–µ–º—É –∫—É—Ä—å–µ—Ä—É!\n'
                                                f'\n'
                                                f'üö∂‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b>—Å–∞–º–æ–≤—ã–≤–æ–∑</b>, –≤—Ä—É—á–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–µ –Ω–∞ —Å—É–º–º—É {final_price}\n'
                                                f'–ù–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—É!', parse_mode="html", reply_markup=cash_markup)

    elif message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        username = message.from_user.username
        await bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤–µ—Ü",
                               reply_markup=main_markup)
        await order_notification(username)
        choices = []

    elif message.text == "üì§ –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã":
        choices_ind = 0
        remove_markup = InlineKeyboardMarkup(resize_keyboard = True)
        for item in choices:
            sneak_name = item.split(" -")[0]
            rem_button = InlineKeyboardButton(f"–£–±—Ä–∞—Ç—å '{sneak_name}'",
                                                  callback_data=f"rem_{sneak_name}i{choices_ind}")
            remove_markup.add(rem_button)
            remove_check.append(sneak_name)
            choices_ind += 1
        await bot.send_message(message.chat.id, "–ß—Ç–æ —É–±—Ä–∞—Ç—å?", reply_markup= remove_markup)



@dp.callback_query_handler(lambda c: c.data.startswith("buy_sneak_"))
async def add_to_basket(callback: types.CallbackQuery):
    global final_price, offset, limit, showed

    if callback.data.startswith("buy_sneak_"):
        if callback.data.replace("buy_sneak_", "") not in choices:
            sql_start()
            product = await get_info(callback.data.replace("buy_sneak_", ""))
            await callback.answer(text = f'–ö—Ä–æ—Å—Å–æ–≤–∫–∏ "{product[0][0]}" –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –∫–æ—Ä–∑–∏–Ω—É')
            choices.append(product[0][0])
            final_price += product[0][1]
            add_value(product[0][0], 0)

@dp.message_handler(state = Ask.question)
async def question_register(message: types.Message, state: Suggestion.suggestion):
    username = message.from_user.username
    question = message.text
    await bot.send_message(message.chat.id, "‚ú≥Ô∏è –í–∞—à –≤–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É\n"
                                            "\n"
                                            "üë®‚Äçüë©‚Äçüë¶ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!", reply_markup=main_markup)
    await get_question(username, question)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data)
async def load_more(callback: types.CallbackQuery):
    global message_def, offset, limit, showed
    if callback.data == "load_more":
        await print_products(message_def, offset, limit, showed)
        offset += limit
        showed += limit

@dp.message_handler(state = UserAddress.user_address)
async def set_address(message: types.Message, state: UserAddress.user_address):
    username = message.from_user.username
    address = message.text
    await bot.send_message(message.chat.id, f'üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ!\n'
                                            f'–í –ø—Ä–µ–¥–µ–ª–∞—Ö –≥. –ú–æ—Å–∫–≤–∞ - <b>350</b> —Ä—É–±–ª–µ–π\n'
                                            f'–ó–∞ –∫–∞–∂–¥—ã–π –∫–∏–ª–ª–æ–º–µ—Ç—Ä –æ—Ç –ú–ö–ê–î–ê + <b>150</b> —Ä—É–±–ª–µ–π\n'
                                            f'\n'
                                            f'üöó –î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: <b>{address}</b>',
                           parse_mode="html", reply_markup=buy_markup)
    await receive_method(address, 1, username)
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith(f"rem_{sneak_name}i{choices_ind}"))
async def remove_from_basket(callback: types.CallbackQuery):
    global final_price,offset, limit, showed
    if callback.data.startswith("rem_"):
        basket_name = callback.data.replace("rem_", "")
        sneak_name_ind = basket_name.split(" -")[0]
        choices_index = sneak_name_ind.split("i")[1]
        sneak_name = sneak_name_ind.split("i")[0]
        if sneak_name in remove_check:
            sql_start()
            product = await get_info(sneak_name)
            await callback.answer(text=f"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ '{sneak_name}' —É–±—Ä–∞–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            remove_check.remove(sneak_name)
            choices.pop(int(choices_index))
            final_price -= product[0][1]
            add_value(sneak_name, 1)